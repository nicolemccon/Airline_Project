import sqlite3
import csv

conn = sqlite3.connect("test.db")  # need to remember to make this generic at the end - test has 16 seats
c = conn.cursor()


def count_seats():
    c.execute("SELECT COUNT(seat) FROM seating")
    for item in c:
        nseats = item[0]
        print("Number of seats on the plane:", nseats)
    #
    c.execute("SELECT COUNT(name) FROM seating WHERE name NOT LIKE '' ;")
    for item in c:
        nnames = item[0]
        print("Number of unavailable seats:", nnames)
    #
    c.execute("SELECT COUNT(name) FROM seating WHERE name LIKE '' ;")
    for item in c:
        navail = item[0]
        print("Number of available seats:", navail)
        navail = nseats - nnames
    #
    c.execute("SELECT seats FROM rows_cols;")
    for item in c:
        seat_letters = item[0]
        seats_per_row = (len(seat_letters))
        print("Number of seats per row:", seats_per_row)
        total_rows = int(nseats / seats_per_row)
        print("Number of rows on the plane:", total_rows)
    #
    return nseats, nnames, navail, seats_per_row, total_rows


def empty_seats_check(total_rows):
    empty_seats = {}
    for i in range(1, total_rows + 1):
        seat = []
        c.execute("SELECT seat FROM seating WHERE row = " + str(i) + " AND NAME LIKE '' ;")
        for item in c:
            seat.append(item[0])
        if len(seat) > 0:
            empty_seats[i] = seat

    return empty_seats


def seat_rows(empty_seats):
    seat_keys = []
    for i in empty_seats.keys():
        seat_keys.append(i)
    return seat_keys
    

def max_seats(seat_keys, empty_seats):
    max_seats = 0
    for row_number in seat_keys:
        if len(empty_seats[row_number]) > max_seats:
            max_seats = len(empty_seats[row_number])
    return max_seats


def booking(navail, total_rows, seats_per_row, empty_seats):
    with open("bookings.csv") as csvfile:
        bookings = csv.reader(csvfile, delimiter=',')
        for row in bookings:  # goes back to here after each booking
            name = row[0]
            passengers = (int(row[1]))
            passenger_overflow = 0

            current_empty = empty_seats_check(total_rows)
            keys = seat_rows(current_empty)
            max_room = max_seats(keys, current_empty)

            filled = False

            if passengers <= navail:
                booking = []
                for i in range(passengers):
                    booking.append(name)

                while filled == False and len(booking) <= max_room:  # only goes into this if the booking can be accommodated together in 1 row
                    for row_number in keys:
                        if len(current_empty[row_number]) >= passengers and filled == False:
                            row = row_number
                            for i in range(passengers):
                                seat = str(current_empty[row_number][i])
                                c.execute("UPDATE seating SET name = ? WHERE ROW = ? AND SEAT = ?;", (name, row, seat,))
                                conn.commit()
                            filled = True

                while filled == False:
                    k = 1
                    passengers_new = passengers - k
                    passengers = passengers_new
                    passenger_overflow += k

                    #print("Empty seats before split booking: ", empty_seats_check(total_rows))
                    current_empty = empty_seats_check(total_rows)
                    keys = seat_rows(current_empty)

                    if passengers <= 0:
                        for row_number in keys:
                            row = row_number
                            for i in range(passenger_overflow):
                                seat = str(current_empty[row_number][i])
                                c.execute("UPDATE seating SET name = ? WHERE ROW = ? AND SEAT = ?;",(name, row, seat,))
                                conn.commit()
                            break
                        filled = True


                    for row_number in keys:
                        if filled == False:
                            if len(current_empty[row_number]) >= passengers:
                                row = row_number
                                for i in range(passengers):
                                    seat = str(current_empty[row_number][i])
                                    c.execute("UPDATE seating SET name = ? WHERE ROW = ? AND SEAT = ?;",
                                              (name, row, seat,))
                                    conn.commit()
                                passengers = (passenger_overflow)
                                passenger_overflow = 0
                                break

                navail -= len(booking)
                #print("Seats available after", name,"booking:", navail)

            else:
                # refused seats
                c.execute("SELECT passengers_refused FROM metrics")
                passengers_refused = []
                for item in c:
                    passengers_refused = item[0]
                ref = []
                for i in range(passengers):
                    ref.append(name)
                passengers_refused += (len(ref))
                c.execute("UPDATE metrics SET passengers_refused = ?", (passengers_refused,))

        print ("Bookings Processed")


def refused_separated():
    c.execute("SELECT * FROM metrics;")
    for item in c:
        refused = item[0]
        separated = item[1]
        print("Passengers Refused: ", item[0])
        print("Passengers Separated: ", item[1])
    return refused, separated


def main():
    nseats, nnames, navail, seats_per_row, total_rows = count_seats()
    empty_seats = empty_seats_check(total_rows)
    booking(navail, total_rows, seats_per_row, empty_seats)
    refused_separated()


if __name__ == '__main__':
    main()


#conn.commit()
#conn.close()
