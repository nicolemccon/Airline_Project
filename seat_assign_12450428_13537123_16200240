# Authors : Nicole McConville (seat_rows, max_seats, booking, refused_separated)
#           Madhura Kashikar (count_seats, empty_seats_check)
# Testing : Mark Doyle

import sqlite3
import csv
import sys


def database_connection(db):
    """Set the connection and cursor for the specified database (airplane)"""
    
    conn = sqlite3.connect(str(db))
    c = conn.cursor()

    return c, conn


def count_seats(c):
    """Determine the number of available seats and number of rows on the plane."""

    c.execute("SELECT COUNT(seat) FROM seating;")
    for item in c:
        n_seats = item[0]

    c.execute("SELECT COUNT(name) FROM seating WHERE name LIKE '' ;")
    for item in c:
        n_avail = item[0]

    c.execute("SELECT seats FROM rows_cols;")
    for item in c:
        seat_letters = item[0]
        seats_per_row = (len(seat_letters))
        total_rows = int(n_seats / seats_per_row)

    return n_avail, total_rows


def empty_seats_check(total_rows, c):
    """Create dictionary to represent the empty seats on the plane."""

    empty_seats = {}
    for i in range(1, total_rows + 1):  # Plane row numbers start at 1, not 0
        seat = []
        c.execute("SELECT seat FROM seating WHERE row = " + str(i) + " AND NAME LIKE '' ;")
        for item in c:
            seat.append(item[0])
        if len(seat) > 0:
            empty_seats[i] = seat
    return empty_seats


def seat_rows(empty_seats):
    """Create list of the row numbers which have empty seats."""

    seat_keys = []
    for i in empty_seats.keys():
        seat_keys.append(i)
    return seat_keys


def max_seats(seat_keys, empty_seats):
    """Finds the first row that has the maximum number of seats available"""

    maximum = 0
    for row_number in seat_keys:
        if len(empty_seats[row_number]) > maximum:
            maximum = len(empty_seats[row_number])
    return maximum


def booking(n_avail, total_rows, csv_arg, c, conn):
    """Allocates seats, if possible, and updates the refused/separated metrics."""

    with open(str(csv_arg)) as csv_file:
        bookings = csv.reader(csv_file, delimiter=',')
        for row in bookings:
            name = row[0]
            passengers = (int(row[1]))
            passengers_separation = passengers  # Used in updating the separation metric below.
            passenger_overflow = 0

            current_empty = empty_seats_check(total_rows, c)
            keys = seat_rows(current_empty)
            max_avail = max_seats(keys, current_empty)

            filled = False

            if passengers <= n_avail:  # Ensure there is room on the plane.
                booking_list = []
                for i in range(passengers):
                    booking_list.append(name)

                while not filled and len(booking_list) <= max_avail:  # If the booking can be accomm. together in 1 row.
                    for row_number in keys:
                        if len(current_empty[row_number]) >= passengers and not filled:  # Find suitably sized row.
                            row = row_number
                            for i in range(passengers):
                                seat = str(current_empty[row_number][i])
                                c.execute("UPDATE seating SET name = ? WHERE ROW = ? AND SEAT = ?;", (name, row, seat,))
                                conn.commit()
                            filled = True

                while not filled:
                    k = 1
                    passengers_new = passengers - k  # Reduce number of passengers until they can be accommodated.
                    passengers = passengers_new
                    passenger_overflow += k  # Ensure no passengers on the booking are left out.

                    current_empty = empty_seats_check(total_rows, c)
                    keys = seat_rows(current_empty)

                    if passengers <= 0:  # Ensures the final passenger is booked on (due to passengers - 1 = 0).
                        for row_number in keys:
                            row = row_number
                            for i in range(passenger_overflow):
                                seat = str(current_empty[row_number][i])
                                c.execute("UPDATE seating SET name = ? WHERE ROW = ? AND SEAT = ?;", (name, row, seat,))
                                conn.commit()
                            break

                        c.execute("SELECT passengers_separated FROM metrics")
                        passengers_separated = []
                        for item in c:
                            passengers_separated = item[0]
                        sep = []
                        for i in range(passengers_separation):  # Using original value from above to update metric.
                            sep.append(name)
                        passengers_separated += (len(sep))
                        c.execute("UPDATE metrics SET passengers_separated = ?", (passengers_separated,))
                        filled = True

                    for row_number in keys:
                        if not filled:
                            if len(current_empty[row_number]) >= passengers:  # If booking has been sufficiently reduced
                                row = row_number
                                for i in range(passengers):
                                    seat = str(current_empty[row_number][i])
                                    c.execute("UPDATE seating SET name = ? WHERE ROW = ? AND SEAT = ?;",
                                              (name, row, seat,))
                                    conn.commit()
                                passengers = passenger_overflow
                                passenger_overflow = 0
                                break

                n_avail -= len(booking_list)  # Reduce number of available seats.

            else:

                c.execute("SELECT passengers_refused FROM metrics")
                passengers_refused = []
                for item in c:
                    passengers_refused = item[0]
                ref = []
                for i in range(passengers):
                    ref.append(name)
                passengers_refused += (len(ref))
                c.execute("UPDATE metrics SET passengers_refused = ?", (passengers_refused,))

        print("Bookings Processed")


def refused_separated(c):
    """Returns the final values for passengers refused and separated."""

    c.execute("SELECT * FROM metrics;")
    for item in c:
        refused = item[0]
        separated = item[1]
        print("Passengers Refused: ", item[0])
        print("Passengers Separated: ", item[1])
    return refused, separated


def main(db, csv_arg):
    c, conn = database_connection(db)
    n_avail, total_rows = count_seats(c)
    booking(n_avail, total_rows, csv_arg, c, conn)
    refused_separated(c)


if __name__ == '__main__':
    main(sys.argv[1], sys.argv[2])
