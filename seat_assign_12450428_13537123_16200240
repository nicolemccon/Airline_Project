# Authors : Nicole McConville (seat_rows, max_seats, booking, refused_separated), Madhura Kashikar (count_seats, empty_seats_check)
# Testing : Mark Doyle

import sqlite3
import csv
import sys

conn = sqlite3.connect(str(sys.argv[1]))
c = conn.cursor()


def count_seats():
    c.execute("SELECT COUNT(seat) FROM seating;")
    for item in c:
        n_seats = item[0]

    c.execute("SELECT COUNT(name) FROM seating WHERE name LIKE '' ;")
    for item in c:
        n_avail = item[0]

    c.execute("SELECT seats FROM rows_cols;")
    for item in c:
        seat_letters = item[0]
        seats_per_row = (len(seat_letters))
        total_rows = int(n_seats / seats_per_row)

    return n_avail, total_rows


def empty_seats_check(total_rows):
    empty_seats = {}
    for i in range(1, total_rows + 1):
        seat = []
        c.execute("SELECT seat FROM seating WHERE row = " + str(i) + " AND NAME LIKE '' ;")
        for item in c:
            seat.append(item[0])
        if len(seat) > 0:
            empty_seats[i] = seat
    return empty_seats


def seat_rows(empty_seats):
    seat_keys = []
    for i in empty_seats.keys():
        seat_keys.append(i)
    return seat_keys


def max_seats(seat_keys, empty_seats):
    maximum = 0
    for row_number in seat_keys:
        if len(empty_seats[row_number]) > maximum:
            maximum = len(empty_seats[row_number])
    return maximum


def booking(n_avail, total_rows):
    with open(str(sys.argv[2])) as csv_file:
        bookings = csv.reader(csv_file, delimiter=',')
        for row in bookings:
            name = row[0]
            passengers = (int(row[1]))
            passengers_separation = passengers
            passenger_overflow = 0

            current_empty = empty_seats_check(total_rows)
            keys = seat_rows(current_empty)
            max_avail = max_seats(keys, current_empty)

            filled = False

            if passengers <= n_avail:
                booking_list = []
                for i in range(passengers):
                    booking_list.append(name)

                while not filled and len(booking_list) <= max_avail:  # if the booking can be accomm. together in 1 row
                    for row_number in keys:
                        if len(current_empty[row_number]) >= passengers and not filled:
                            row = row_number
                            for i in range(passengers):
                                seat = str(current_empty[row_number][i])
                                c.execute("UPDATE seating SET name = ? WHERE ROW = ? AND SEAT = ?;", (name, row, seat,))
                                conn.commit()
                            filled = True

                while not filled:
                    k = 1
                    passengers_new = passengers - k
                    passengers = passengers_new
                    passenger_overflow += k

                    current_empty = empty_seats_check(total_rows)
                    keys = seat_rows(current_empty)

                    if passengers <= 0:
                        for row_number in keys:
                            row = row_number
                            for i in range(passenger_overflow):
                                seat = str(current_empty[row_number][i])
                                c.execute("UPDATE seating SET name = ? WHERE ROW = ? AND SEAT = ?;",(name, row, seat,))
                                conn.commit()
                            break

                        c.execute("SELECT passengers_separated FROM metrics")
                        passengers_separated = []
                        for item in c:
                            passengers_separated = item[0]
                        sep = []
                        for i in range(passengers_separation):
                            sep.append(name)
                        passengers_separated += (len(sep))
                        c.execute("UPDATE metrics SET passengers_separated = ?", (passengers_separated,))
                        filled = True

                    for row_number in keys:
                        if not filled:
                            if len(current_empty[row_number]) >= passengers:
                                row = row_number
                                for i in range(passengers):
                                    seat = str(current_empty[row_number][i])
                                    c.execute("UPDATE seating SET name = ? WHERE ROW = ? AND SEAT = ?;",
                                              (name, row, seat,))
                                    conn.commit()
                                passengers = passenger_overflow
                                passenger_overflow = 0
                                break

                n_avail -= len(booking_list)

            else:

                c.execute("SELECT passengers_refused FROM metrics")
                passengers_refused = []
                for item in c:
                    passengers_refused = item[0]
                ref = []
                for i in range(passengers):
                    ref.append(name)
                passengers_refused += (len(ref))
                c.execute("UPDATE metrics SET passengers_refused = ?", (passengers_refused,))

        print("Bookings Processed")


def refused_separated():
    c.execute("SELECT * FROM metrics;")
    for item in c:
        refused = item[0]
        separated = item[1]
        print("Passengers Refused: ", item[0])
        print("Passengers Separated: ", item[1])
    return refused, separated


def main():
    n_avail, total_rows = count_seats()
    booking(n_avail, total_rows)
    refused_separated()


if __name__ == '__main__':
    main()
